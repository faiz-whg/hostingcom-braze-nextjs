/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/auth/login/route";
exports.ids = ["app/api/auth/login/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fauth%2Flogin%2Froute&page=%2Fapi%2Fauth%2Flogin%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Flogin%2Froute.ts&appDir=%2FUsers%2Ffaizur%2Fhostingcom-braze-nextjs%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ffaizur%2Fhostingcom-braze-nextjs&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fauth%2Flogin%2Froute&page=%2Fapi%2Fauth%2Flogin%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Flogin%2Froute.ts&appDir=%2FUsers%2Ffaizur%2Fhostingcom-braze-nextjs%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ffaizur%2Fhostingcom-braze-nextjs&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_faizur_hostingcom_braze_nextjs_src_app_api_auth_login_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/auth/login/route.ts */ \"(rsc)/./src/app/api/auth/login/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/auth/login/route\",\n        pathname: \"/api/auth/login\",\n        filename: \"route\",\n        bundlePath: \"app/api/auth/login/route\"\n    },\n    resolvedPagePath: \"/Users/faizur/hostingcom-braze-nextjs/src/app/api/auth/login/route.ts\",\n    nextConfigOutput,\n    userland: _Users_faizur_hostingcom_braze_nextjs_src_app_api_auth_login_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZhdXRoJTJGbG9naW4lMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmF1dGglMkZsb2dpbiUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmF1dGglMkZsb2dpbiUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmZhaXp1ciUyRmhvc3Rpbmdjb20tYnJhemUtbmV4dGpzJTJGc3JjJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRmZhaXp1ciUyRmhvc3Rpbmdjb20tYnJhemUtbmV4dGpzJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNxQjtBQUNxQjtBQUNsRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUdBQW1CO0FBQzNDO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFzRDtBQUM5RDtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUMwRjs7QUFFMUYiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL2ZhaXp1ci9ob3N0aW5nY29tLWJyYXplLW5leHRqcy9zcmMvYXBwL2FwaS9hdXRoL2xvZ2luL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9hdXRoL2xvZ2luL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYXV0aC9sb2dpblwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvYXV0aC9sb2dpbi9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9mYWl6dXIvaG9zdGluZ2NvbS1icmF6ZS1uZXh0anMvc3JjL2FwcC9hcGkvYXV0aC9sb2dpbi9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHdvcmtBc3luY1N0b3JhZ2UsXG4gICAgICAgIHdvcmtVbml0QXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fauth%2Flogin%2Froute&page=%2Fapi%2Fauth%2Flogin%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Flogin%2Froute.ts&appDir=%2FUsers%2Ffaizur%2Fhostingcom-braze-nextjs%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ffaizur%2Fhostingcom-braze-nextjs&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/auth/login/route.ts":
/*!*****************************************!*\
  !*** ./src/app/api/auth/login/route.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_services_upmind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/services/upmind */ \"(rsc)/./src/lib/services/upmind.ts\");\n// API Route: /api/auth/login\n\n // Ensure correct path\n/**\n * @async\n * @function POST\n * @description Handles POST requests to the `/api/auth/login` endpoint.\n * It expects a JSON body with `username` (email) and `password`.\n * It calls the `upmindService.login` method to authenticate the user with Upmind.\n * - On successful authentication and if an `access_token` is present in the Upmind response,\n *   it returns a JSON response with `success: true` and the Upmind response data.\n * - If Upmind responds with a 2xx status but the `access_token` is missing, it returns `success: false`\n *   with an error message indicating unexpected data, and a 200 or 500 status.\n * - If `username` or `password` are missing in the request, it returns a 400 error.\n * - For other errors (e.g., Upmind service errors, network issues), it logs the error\n *   and returns a JSON response with `success: false` and an appropriate error message and status code.\n * @param {Request} request - The incoming Next.js API request object.\n * @returns {Promise<NextResponse>} A promise that resolves to a Next.js API response object.\n */ async function POST(request) {\n    try {\n        const body = await request.json();\n        const { username, password } = body;\n        if (!username || !password) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: 'Username and password are required.'\n            }, {\n                status: 400\n            });\n        }\n        const result = await _lib_services_upmind__WEBPACK_IMPORTED_MODULE_1__[\"default\"].login(username, password);\n        // Type guard to check if it's a UpmindLoginResponse by presence and type of access_token\n        if (result && typeof result === 'object' && 'access_token' in result && typeof result.access_token === 'string') {\n            const loginSuccessResponse = result; // Explicit type cast after guard\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                data: loginSuccessResponse,\n                message: 'Login successful.'\n            });\n        } else {\n            // This is either an UpmindServiceErrorResponse or an unexpected success response without access_token\n            const errorResponse = result; // Type assertion for clarity\n            console.warn('Upmind login failed or returned unexpected data:', errorResponse);\n            // Check if it's a structured error from our UpmindService (which it should be if not a login success)\n            if (errorResponse && errorResponse.status === 'error' && typeof errorResponse.error === 'string') {\n                // Consider using a more specific status code if available from errorResponse, e.g., errorResponse.statusCode\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: false,\n                    error: errorResponse.error,\n                    data: errorResponse.data\n                }, {\n                    status: 500\n                });\n            }\n            // Fallback for truly unexpected scenarios (e.g., Upmind changed API, login didn't throw, but response is malformed)\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: 'Login attempt completed but received an unexpected data format from the authentication service.',\n                data: errorResponse // Send back what was received for debugging\n            }, {\n                status: 500\n            });\n        }\n    } catch (error) {\n        console.error('Login API Error:', error);\n        // Assert error to a more specific type to access its properties\n        const err = error;\n        const status = err.status || 500;\n        const errorMessage = err.data?.error?.message || err.data?.message || err.message || 'Login failed.';\n        const responseData = err.data;\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: errorMessage,\n            data: responseData\n        }, {\n            status\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/auth/login/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/services/upmind.ts":
/*!************************************!*\
  !*** ./src/lib/services/upmind.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UpmindService: () => (/* binding */ UpmindService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n/**\n * @file Upmind Service\n * @description This service handles interactions with the Upmind API, primarily for user registration and login.\n * It includes type definitions for API requests and responses and encapsulates API call logic.\n * It is intended to be used as a singleton throughout the application.\n */ \n/**\n * @export\n * @class UpmindService\n * @description Provides methods to interact with the Upmind API for operations like user registration and login.\n */ class UpmindService {\n    /**\n   * @constructor\n   * @description Initializes the UpmindService.\n   * Sets the API endpoint URLs (currently hardcoded, consider moving to environment variables for flexibility).\n   * Configures default HTTP headers, including 'Origin' and 'Referer' which are critical for Upmind API access\n   * and are sourced from environment variables (UPMIND_ORIGIN, UPMIND_REFERER).\n   */ constructor(){\n        // TODO: Consider moving these Upmind API URLs to environment variables.\n        this.loginUrl =  true ? `${\"https://api.upmind.io\"}/oauth/access_token` : 0;\n        this.registerUrl =  true ? `${\"https://api.upmind.io\"}/api/clients/register` : 0;\n        this.headers = {\n            'Content-Type': 'application/json',\n            'Accept': '*/*',\n            'Accept-Encoding': 'gzip, deflate, br, zstd',\n            'Accept-Language': 'en-US,en;q=0.9',\n            // 'Origin' and 'Referer' headers are often critical for Upmind API requests to prevent CSRF and validate the source.\n            // These should be configured in environment variables (.env.local) to match allowed domains in Upmind settings.\n            // For local development, these might be 'http://localhost:3000'.\n            'Origin': process.env.UPMIND_ORIGIN || 'https://analyd.com',\n            'Referer': process.env.UPMIND_REFERER || 'https://analyd.com/',\n            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36' // Standard User-Agent.\n        };\n    }\n    /**\n   * @async\n   * @method register\n   * @description Registers a new user (client) with the Upmind API.\n   * @param {UserData} userData - The user data for registration (email, name, password, etc.).\n   * @returns {Promise<UpmindServiceResponse>} A promise that resolves to an `UpmindServiceResponse` object,\n   * indicating success (with normalized client data) or failure (with an error message).\n   * Successful registration via this service checks for `status: 'ok'` and a valid `id` in Upmind's direct API response data.\n   */ async register(userData) {\n        const registrationPayload = {\n            email: userData.email,\n            firstname: userData.firstname,\n            lastname: userData.lastname,\n            phone: userData.phone || null,\n            phone_code: userData.phone_code || null,\n            phone_country_code: userData.phone_country_code || null,\n            username: userData.username || userData.email,\n            password: userData.password\n        };\n        console.log('Upmind Registration request payload:', JSON.stringify(registrationPayload, null, 2));\n        try {\n            const upmindHttpResult = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(this.registerUrl, registrationPayload, {\n                headers: this.headers\n            });\n            console.log('Upmind API raw success response:', JSON.stringify(upmindHttpResult.data, null, 2));\n            const actualUpmindFullResponse = upmindHttpResult.data; // This is of type RawUpmindActualApiResponse\n            // Validate the Upmind API's response structure for success.\n            // According to Upmind API conventions,\n            // a successful registration should have top-level 'status: \"ok\"'\n            // and a 'data' object containing the client details, including an 'id'.\n            if (actualUpmindFullResponse && actualUpmindFullResponse.status === 'ok' && // Upmind's own status field\n            actualUpmindFullResponse.data && // Check if the nested 'data' (client object) exists\n            (typeof actualUpmindFullResponse.data.id === 'string' || typeof actualUpmindFullResponse.data.id === 'number')) {\n                // Successfully received and validated the client data from Upmind.\n                const clientDataFromUpmind = actualUpmindFullResponse.data; // This is the nested client object from Upmind.\n                // Normalize the received client data into our UpmindSuccessfulRegistrationData structure.\n                // This ensures consistency for the rest of the application (e.g., 'id' as a string).\n                const processedClientData = {\n                    ...clientDataFromUpmind,\n                    id: clientDataFromUpmind.id.toString()\n                };\n                return {\n                    status: 'ok',\n                    data: processedClientData,\n                    message: 'User registered successfully with Upmind via service.' // Optional success message.\n                };\n            } else {\n                // This 'else' block handles scenarios where the Upmind API returns an HTTP 2xx status,\n                // but the response body does not conform to the expected success structure (e.g., missing 'status: \"ok\"' or 'data.id').\n                let detailedErrorMessage = 'Upmind API call succeeded (HTTP 2xx) but the response content was unexpected or indicated an internal Upmind error.';\n                if (actualUpmindFullResponse) {\n                    if (actualUpmindFullResponse.status !== 'ok') {\n                        detailedErrorMessage = `Upmind API reported status: '${actualUpmindFullResponse.status}'.`;\n                        if (actualUpmindFullResponse.error) {\n                            const errorDetails = typeof actualUpmindFullResponse.error === 'string' ? actualUpmindFullResponse.error : JSON.stringify(actualUpmindFullResponse.error);\n                            detailedErrorMessage += ` Error details: ${errorDetails}`;\n                        }\n                    } else if (!actualUpmindFullResponse.data) {\n                        detailedErrorMessage = \"Upmind API response status was 'ok' but the 'data' field (client object) is missing.\";\n                    } else if (typeof actualUpmindFullResponse.data.id !== 'string' && typeof actualUpmindFullResponse.data.id !== 'number') {\n                        detailedErrorMessage = \"Upmind API response 'data' field is present but 'id' is missing or not a string/number.\";\n                    }\n                } else {\n                    detailedErrorMessage = \"Upmind API call succeeded (HTTP 2xx) but the response body was empty or malformed.\";\n                }\n                console.error('Upmind service: Issue processing successful Upmind API response. Raw response:', actualUpmindFullResponse, 'Generated error message:', detailedErrorMessage);\n                return {\n                    status: 'error',\n                    error: detailedErrorMessage,\n                    data: actualUpmindFullResponse // Include the raw Upmind response for further debugging if needed.\n                };\n            }\n        } catch (error) {\n            // This block handles network errors or HTTP status codes indicating failure (e.g., 4xx, 5xx) from the Upmind API.\n            console.error('Upmind service: Error during registration call to Upmind API.', error);\n            if (axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isAxiosError(error) && error.response) {\n                const errorData = error.response.data;\n                const errorMessage = errorData?.error?.message || errorData?.message || 'Registration failed with Upmind API.';\n                return {\n                    status: 'error',\n                    error: errorMessage,\n                    data: errorData\n                };\n            } else {\n                let message = 'Upmind registration service encountered an unknown error.';\n                if (error instanceof Error) {\n                    message = error.message;\n                } else if (typeof error === 'string') {\n                    message = error;\n                }\n                return {\n                    status: 'error',\n                    error: message,\n                    data: null\n                };\n            }\n        }\n    }\n    /**\n   * @async\n   * @method login\n   * @description Authenticates a user with Upmind using username and password (OAuth password grant type).\n   * @param {string} password - The user's password.\n   * @param {string} username - The user's username (typically email).\n   * @returns {Promise<UpmindLoginResponse | UpmindServiceErrorResponse>} A promise that resolves to Upmind's login response\n   * (containing access_token, etc.) on success, or an `UpmindServiceErrorResponse` on failure.\n   */ async login(username, password) {\n        try {\n            const payload = {\n                username,\n                password,\n                grant_type: 'password'\n            };\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(this.loginUrl, payload, {\n                headers: this.headers\n            });\n            return response.data;\n        } catch (error) {\n            this.handleError(error);\n            throw error;\n        }\n    }\n    /**\n   * @async\n   * @method refreshToken\n   * @description Refreshes an OAuth access token using a refresh token with Upmind.\n   * @param {string} refreshToken - The refresh token obtained during a previous login.\n   * @returns {Promise<UpmindLoginResponse | UpmindServiceErrorResponse>} A promise that resolves to Upmind's login response\n   * (containing a new access_token, etc.) on success, or an `UpmindServiceErrorResponse` on failure.\n   * Note: The current implementation re-throws errors after `handleError`, which then might be caught by a higher-level caller.\n   * Consider returning a standardized `UpmindServiceErrorResponse` directly like in the `register` method for consistency.\n   */ async refreshToken(refreshToken) {\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(this.loginUrl, {\n                grant_type: 'refresh_token',\n                refresh_token: refreshToken\n            }, {\n                headers: this.headers\n            });\n            return response.data;\n        } catch (error) {\n            this.handleError(error);\n            throw error;\n        }\n    }\n    /**\n   * @private\n   * @method handleError\n   * @description A centralized private error handler for Upmind API interactions within this service.\n   * It processes Axios errors and other error types, creating a custom error object with status and data.\n   * This method always throws an error, intended to be caught by the calling public method or a global error handler.\n   * Note: While the `register` method has integrated its error handling to return a `UpmindServiceErrorResponse`,\n   * `login` and `refreshToken` still utilize this re-throwing `handleError` method.\n   * For consistency, `login` and `refreshToken` could be updated to return `UpmindServiceErrorResponse` directly.\n   * @param {unknown} error - The error object caught, typically from an Axios request.\n   * @throws {CustomError} Throws a standardized `CustomError` object containing details from the Upmind API error or a generic service error.\n   */ handleError(error) {\n        if (axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isAxiosError(error) && error.response) {\n            const errorData = error.response.data;\n            const errorMessage = errorData?.error?.message || errorData?.message || 'Authentication failed with Upmind';\n            const customError = new Error(errorMessage);\n            customError.status = error.response.status;\n            customError.data = errorData;\n            console.error(`Upmind API Error: Status ${customError.status}, Message: ${customError.message}`, customError.data);\n            throw customError;\n        } else {\n            let message = 'Upmind authentication request failed';\n            if (error instanceof Error) {\n                message = error.message;\n            } else if (typeof error === 'string') {\n                message = error;\n            }\n            const customError = new Error(message);\n            customError.status = 500; // Default status for non-API errors\n            console.error(`Upmind Service Error: Message: ${message}`, error);\n            throw customError;\n        }\n    }\n}\n/**\n * Singleton instance of the UpmindService.\n * This instance is exported to ensure a single point of interaction with the Upmind API throughout the application.\n */ /**\n * @constant upmindService\n * @description Singleton instance of the {@link UpmindService}.\n * This instance is exported to ensure a single, consistent point of interaction\n * with the Upmind API throughout the application.\n */ const upmindService = new UpmindService();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (upmindService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/services/upmind.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/axios","vendor-chunks/asynckit","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/call-bind-apply-helpers","vendor-chunks/debug","vendor-chunks/get-proto","vendor-chunks/mime-db","vendor-chunks/has-symbols","vendor-chunks/gopd","vendor-chunks/function-bind","vendor-chunks/form-data","vendor-chunks/follow-redirects","vendor-chunks/supports-color","vendor-chunks/proxy-from-env","vendor-chunks/ms","vendor-chunks/mime-types","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/has-flag","vendor-chunks/get-intrinsic","vendor-chunks/es-set-tostringtag","vendor-chunks/es-object-atoms","vendor-chunks/es-define-property","vendor-chunks/dunder-proto","vendor-chunks/delayed-stream","vendor-chunks/combined-stream"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fauth%2Flogin%2Froute&page=%2Fapi%2Fauth%2Flogin%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Flogin%2Froute.ts&appDir=%2FUsers%2Ffaizur%2Fhostingcom-braze-nextjs%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ffaizur%2Fhostingcom-braze-nextjs&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();